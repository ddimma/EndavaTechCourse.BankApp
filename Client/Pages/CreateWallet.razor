@page "/wallets/create"
@using EndavaTechCourse.BankApp.Shared
@inject NavigationManager NavigationManager
@inject HttpClient httpClient
@layout UserLayout

<PageTitle>Create your new Wallet</PageTitle>

<MudForm Model="_createWallet" OnValidSubmit="CreateWalletAsync">
    <MudSelect T="string" @bind-Value="_createWallet.Type" Label="Type" AnchorOrigin="Origin.BottomCenter">
        <MudSelectItem Value="@("Basic")" />
        <MudSelectItem Value="@("Silver")" />
        <MudSelectItem Value="@("Gold")" />
        <MudSelectItem Value="@("Platinum")" />
    </MudSelect>

    <MudSelect T="string" @bind-Value="_createWallet.Currency" Label="CurrencyCode" AnchorOrigin="Origin.BottomCenter">
        @foreach (var currency in currencies)
        {
            <MudSelectItem T="string" Value="@currency.CurrencyCode">@currency.CurrencyCode</MudSelectItem>
        }
    </MudSelect>

    <MudNumericField @bind-Value="_createWallet.Amount" Label="Amount" Required="true" />
    <MudButton Type="ButtonType.Submit" @onclick="CreateWalletAsync">Create Wallet</MudButton>
</MudForm>

@code{
    private WalletDto _createWallet = new();
    private List<CurrencyDto> currencies = new();

    private async Task CreateWalletAsync()
    {
        try
        {
            await httpClient.PostAsJsonAsync("api/wallets/create", _createWallet);
            NavigationManager.NavigateTo("/wallets");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        currencies = await httpClient.GetFromJsonAsync<List<CurrencyDto>>("/api/currencies");
    }
}
